@page "/"

<PageTitle>Example prompts</PageTitle>
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
    }

    .chat-container {
        max-width: 70%;
        margin: 50px auto;
        border: 1px solid #ddd;
        background-color: #fff;
        border-radius: 5px;
    }

    .chat-header {
        padding: 10px;
        background-color: #333;
        color: #fff;
        text-align: center;
    }

    .chat-messages {
        height: 500px;
        overflow-y: auto;
        padding: 10px;
    }

    .message {

        display: flex;
        padding: 10px;
        margin: 10px 0;
        border-radius: 5px;
    }

    .profile-pic {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .message.user2 {
        flex-direction: row-reverse
        }
    .user1 .profile-pic {
        order: 1;
    }

    .user1 .text {
        background-color: #e6e6e6;
        padding: 10px;
        border-radius: 5px;
        order: 2;
    }

    .user2 .profile-pic {
        order: 1;
        margin-left: 10px;
        margin-right: 0;
    }

    .user2 .text {
        background-color: #a3d8f4;
        padding: 10px;
        border-radius: 5px;
        order: 2;
        text-align: right;
    }

    .chat-input {
        display: flex;
        padding: 10px;
        border-top: 1px solid #ddd;
    }

        .chat-input textarea {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-right: 10px;
        }

        .chat-input button {
            padding: 10px 20px;
            border: none;
            background-color: #333;
            color: #fff;
            cursor: pointer;
            border-radius: 5px;
        }

            .chat-input button:hover {
                background-color: #555;
            }
            .plan > span {
                padding: 5px;
                border-radius: 5px;
                background-color: #ddd;
                margin-right: 5px;
            }
            .plan > span.active {
            background-color: #ebd834;
            }
            .plan > span.done{
            background-color: #02cc53;
            }
</style>
<style>

    .todo-container {
        max-width: 70%;
        margin: 50px auto;
        border: 1px solid #ddd;
        background-color: #fff;
        border-radius: 5px;
        margin-top: 20px; /* Space between chat and todo boxes */
    }

    .todo-header {
        padding: 10px;
        background-color: #333;
        color: #fff;
        text-align: center;
    }

    .todo-items {
        padding: 10px;
    }

    .todo-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

        .todo-item:last-child {
            border-bottom: none;
        }

    .description {
        flex: 2;
    }

    .due-date, .completed-date {
        flex: 1;
        color: #888;
    }

    .complete-btn {
        padding: 5px 10px;
        border: none;
        background-color: #333;
        color: #fff;
        cursor: pointer;
        border-radius: 5px;
    }

        .complete-btn:hover {
            background-color: #555;
        }

    .todo-item.completed .complete-btn {
        display: none;
    }
</style>



<div class="todo-container">
    <div class="todo-header">
        ToDo List
    </div>
    <div class="todo-items">
        @if (ToDoItems.Count == 0)
        {
            <span>ToDo list is empty 🎉</span>
        }
        @foreach (var todo in ToDoItems)
        {

            <div class="todo-item">
                <div class="description">@todo.Description</div>
                @if (todo.CompletedAt == null)
                {
                    @if (todo.Due != null)
                    {
                        <div class="due-date">Due: @todo.Due.Value.ToString("g")</div>
                    }
                    @if (todo.ExpectedDuration != null)
                    {
                        <div class="due-date">Est: @((int)todo.ExpectedDuration.Value.TotalMinutes) minutes</div>
                    }
                    <button @onclick="() => CompleteTodo(todo)" class="complete-btn">Complete</button>
                }
                else
                {
                    <div class="completed-date">Completed: @todo.CompletedAt.Value.ToString("g")</div>
                }
            </div>
        }
    </div>
</div>

<div class="chat-container">
    <div class="chat-header">
        Personal assistant
    </div>
    <div class="chat-messages" id="chatMessages">
        @foreach (var message in Messages)
        {
            <div class="message @(message.IsUser ? "user1" : "user2")">
                @if (message.IsUser)
                {
                    <img src="user.png" alt="User 1" class="profile-pic">
                }
                else
                {
                    <img src="ai.png" alt="User 2" class="profile-pic">
                }
                <div class="text">@((MarkupString) message.Text.Replace("\n", "<br />"))</div>
            </div>
        }

        @if (Ai.Running)
        {
            <div class="message user2">
                <img src="ai.png" alt="User 2" class="profile-pic">
                <div class="text">
                    <div>
                        Thinking ...
                    </div>
                    @if (Ai.CurrentPlan != null)
                    {
                        <b>PLAN:</b>
                        <div class="plan">
                            @foreach (var step in Ai.CurrentPlan.Steps)
                            {
                                <span class="step @(step.IsActive ? "active" : "") @(step.IsDone ? "done" : "")">@step.Name</span>
                            }
                        </div>
                    }
                </div>

            </div>
        }
    </div>
    <div class="chat-input">
        <textarea @bind="CurrentMessage" rows="3" placeholder="Type a message..."></textarea>
        <button @onclick="async () => await SendMessage()">Send</button>
    </div>
</div>
<a href="/examples">Examples</a>
